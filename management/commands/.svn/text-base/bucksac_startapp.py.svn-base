"""
Django-manage.py extension 
python manage.py bucksac_startapp <app_short_name>
"""

from django.core.management.base import BaseCommand, CommandError
from django.conf import settings
from django.core.management import call_command

import shutil
import os

def recursive_file_gen(app_dir, dest_dir, app):
    """
    walk through default assets directory and generate files
    """
    #change = ['newapp.js', 'newapp.css']
    
    for root, dirs, files in os.walk(app_dir):
        if root.find(".") == -1:
            
            for directory in dirs:
                if not directory.startswith("."):
                    new_d = directory
                    if directory == "newapp":
                        new_d = app
                    
                    placement = os.path.join("%s" % root, "%s" % new_d)
                    placement = placement.replace(app_dir, dest_dir)
                    if not os.path.isdir(placement):
                        os.mkdir(placement)
                    
                    
            for the_file in files:
                
                orig = os.path.join(root, the_file)
                
                placement = orig.replace(app_dir, dest_dir)
                    
                placement = placement.replace("newapp", app)
                                
                shutil.copy(orig, placement)

class Command(BaseCommand):
    """
    bucksac_startapp BaseCommand extension
    """
    
    args = '<short_name>'
    help = 'Begins a new BucksAC app'

    

    def handle(self, *args, **options):
        """
        handle the calling of manage.py bucksac_startapp
        """
        if not len(args) == 1:
            raise CommandError('This command requires exactly 1 argument: the new app\'s short name')
        
        app = args[0]
         
        if app == "startapp" or app == "newapp":
            raise CommandError('Apps may not be named \'%s\'' % app)
        
        if app.startswith("."):
            raise CommandError("Apps may not start with a '.'")
       
        print 'Creating app with short name \'%s\'' % app
        start_dir = os.path.join(settings.PROJECT_PATH, 'main/assets/startapp')
        
        assets = os.path.join(start_dir, 'static')
        templates = os.path.join(start_dir, 'templates')
        
        dest_dir = os.path.join(settings.PROJECT_PATH, app)
        
        if os.path.isdir(dest_dir):
            raise CommandError('\nThere is already a directory in your BucksAC development environment named \'%s\'. Please choose a different short name.' % app)
        
        print 'creating django app...'
        call_command("startapp", app)
        
        print 'generating directory structure...'
        recursive_file_gen(assets, dest_dir, app)
        
        def make_custom_files(change_map):
            """
            Handles files that require the app shortname to be inserted here and there
            """
            for orig in change_map:
                
                print '...%s' % change_map[orig]
                
                the_file = open(os.path.join(templates, orig))
                content = the_file.read()
                the_file.close()
                
                content = content.replace("_startapp", app)
                the_file = open(os.path.join(dest_dir, change_map[orig]),"w")
                
                the_file.write(content)                
                the_file.close()
            
        
        
        change_map = {
               'base.html': 'templates/%s/base.html' % app,
               'bucksac_app.txt': "bucksac_app.py",
               'home.html': 'templates/%s/home.html' % app,
               'menu.html': 'templates/%s/menu.html' % app,
               'urls.txt': "urls.py",
               'views.txt': "views.py",
               "style.css": "css/%s.css" % app,
               "mobile.css": "css/mobile.css"
            }
        print 'generating files...'
        make_custom_files(change_map)
        print 'finished.'
        
        

        
        